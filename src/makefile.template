BINNAME=nekbone
CASENAME=
CASEDIR=
S=
J:=$S/jl
OPT_INCDIR:=./
OBJDIR=obj
IFMPI= 
IFNEKCOMM=
IFNEKDLAY=
IFMGRID=
F77=
CC=
P=
PPPO=
PPS=
G=
OPT_FLAGS_STD=
USR=
USR_LFLAGS=

################################################################################

lFLAGS = $(USR_LFLAGS)

PPS_F = $(patsubst %,$(PPPO)-D%,$(PPS))
PPS_C = $(patsubst %,-D%,$(PPS))

#NEW #########################################################################
BONE = bk5.o driver.o math.o prox_setup.o semhat.o speclib.o nvmlPower.o

#mxm_wrapper.o prox_dssum.o\
#prox_setup.o semhat.o speclib.o nvmlPower.o

ifeq ($(IFNEKCOMM),true)
BONE = driver_comm.o math.o mxm_wrapper.o \
speclib.o delay_dum.o
else
ifeq ($(IFNEKDLAY),true)
BONE += delay.o
else
BONE += delay_dum.o
endif
endif

#ifeq ($(IFMGRID),true)
#BONE += hsmg.o dsygv.o ssygv.o
#else
#BONE += hsmg_dum.o
#endif
################################################################################
# MXM 
MXM=mxm_std.o blas.o

################################################################################
# CUDA
#BONE += ax_cuda.o 
BONE += ax_cuda2.o
#BONE += hsmg_cuda.o
# JL Routines ###################################################################
JO  = jl_
JL := -DPREFIX=jl_

JLCORE = $(JO)gs.o $(JO)sort.o $(JO)sarray_transfer.o $(JO)sarray_sort.o \
$(JO)gs_local.o $(JO)crystal.o $(JO)comm.o $(JO)tensor.o $(JO)fail.o \
$(JO)fcrystal.o $(JO)sleep.o

COMM_MPI := comm_mpi.o
ifeq ($(IFMPI),false)
  COMM_MPI := ${COMM_MPI} mpi_dummy.o
endif

ifeq ($(IFMPI),false)
	DUMMY:= $(shell cp $S/mpi_dummy.h $S/mpif.h) 
else
	DUMMY:= $(shell rm -rf $S/mpif.h) 
endif

#####################################################################################
TMPBON = $(BONE) $(COMM_MPI) #$(MXM)
NOBJS_Fbon = $(patsubst %,$(OBJDIR)/%,$(TMPBON))

#TMP0c = $(JLCORE)
#NOBJS_C0 = $(patsubst %,$(OBJDIR)/%,$(TMP0c))

NOBJS0_bone = $(NOBJS_Fbon) #$(NOBJS_C0)
##############################################################################

L0=$(G) -O0
L2=$(G) -O2
L3=$(G) -O3
L4=$(L3)

FL0   = $(L0) $(P) $(PPS_F) -I$(CASEDIR) -I$S -I$(OPT_INCDIR)
FL2i4 = $(L0)      $(PPS_F) -I$(CASEDIR) -I$S -I$(OPT_INCDIR)
FL2   = $(L2) $(P) $(PPS_F) -I$(CASEDIR) -I$S -I$(OPT_INCDIR)
FL3   = $(L3) $(P) $(PPS_F) -I$(CASEDIR) -I$S -I$(OPT_INCDIR)
FL4   = $(L4) $(P) $(PPS_F) -I$(CASEDIR) -I$S -I$(OPT_INCDIR)

cFL0   = $(L0) $(PPS_C) 
cFL2   = $(L2) $(PPS_C) 
cFL3   = $(L3) $(PPS_C) 
cFL4   = $(L4) $(PPS_C) 
################################################################################
all : nekbone

objdir: 
	@mkdir $(OBJDIR) 2>/dev/null; cat /dev/null 

nekbone: 	objdir $(NOBJS0_bone)
	$(F77) -o ${BINNAME} $G $(NOBJS0_bone) $(lFLAGS)
	@if test -f ${BINNAME}; then \
	echo "#############################################################"; \
	echo "#                  Compilation successful!                  #"; \
	echo "#############################################################"; \
        size ${BINNAME}; \
        echo ""; \
	else \
	echo -e "\033[1;31;38m" "ERROR: Compilation failed!"; \
	echo -e "\033[0m"; \
	fi
ifeq ($(IFMPI),false) 
	@rm -rf $S/mpif.h
endif

clean:
	rm -rf $(OBJDIR) ${BINNAME}

$(NOBJS_Fbon) : SIZE
# CORE      ############################################################################
$(OBJDIR)/bk5.o          :$S/bk5.f;                       $(F77) -c $(FL4) $< -o $@
$(OBJDIR)/prox_setup.o  :$S/prox_setup.f;               $(F77) -c $(FL4) $< -o $@
$(OBJDIR)/driver.o      :$S/driver.f;                   $(F77) -c $(FL2) $< -o $@
$(OBJDIR)/math.o	:$S/math.f;			$(F77) -c $(FL4) $< -o $@
$(OBJDIR)/semhat.o	:$S/semhat.f;			$(F77) -c $(FL4) $< -o $@
$(OBJDIR)/speclib.o	:$S/speclib.f;			$(F77) -c $(FL2) $< -o $@
$(OBJDIR)/blas.o        :$S/blas.f; 		        $(F77) -c $(FL2i4) $< -o $@
$(OBJDIR)/comm_mpi.o	:$S/comm_mpi.f;			$(F77) -c $(FL2) $< -o $@
$(OBJDIR)/delay.o	:$S/delay.f;			$(F77) -c $(FL2) $< -o $@
$(OBJDIR)/delay_dum.o	:$S/delay_dum.f;		$(F77) -c $(FL2) $< -o $@
# C Files ##################################################################################
$(OBJDIR)/nvmlPower.o		 :$S/nvmlPower.cpp;	  nvc++  -c $< -o $@
$(OBJDIR)/chelpers.o             :$S/chelpers.c;          $(CC) -c $(cFL2) $(JL) $< -o $@
$(OBJDIR)/ax_cuda2.o  :$S/ax_cuda2.cu; nvcc  -O3 -Xcompiler -mcmodel=medium -c  $< -o $@
